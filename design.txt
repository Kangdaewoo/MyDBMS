DBMS:
    - Map<std::string schemaName, Schema schema> Schemas

    - parseQuery(std::string query)
    - processQuery()

    - int getTypeSize(std::string type)
    - std::string getStatusMessage(int status)

    - bool satisfy(FDTriplet tests, FDPair data)
    - FDPair applyChanges(FDPair data, FDTriplet changes)

class Schema:
    private:
        - const char *schemaName

        - const char *fieldNames[]
        - const char *fieldTypes[]
        - int numFields

        - int rowSize
        - int numRows

        - LinkedList *keyList

        - PagedFileManager *fileManager
        - int write(FDPair data)
        - int write(FDPair data, int offset)
        - FDPair read(int offset)

        - std::string rowToString(FDPair data)
        - FDPair stringToRow(std::string buf)

        // Helpers.
        - void updateBPTs(FDTriplet changes, FDPair oldPair, FDPair newPair, int offset)
        - void removeFromBPTs(FDPair pair, int offset)
        - LinkedList *findBPT(std::string[] fields, int numFields)
    
    public:
        - Schema(std::string schemaName, FDPair fieldNamesAndTypes)

        - int insert(FDPair[] data, int numToInsert)
        - int update(FDTriplet tests, FDTriplet changes)
        - LinkedList *find(FDTriplet tests)
        - int remove(FDTriplet tests)

        - bool isEmpty()
        - int size()

        - bool setKey(std::string[] keys, int numKeys)

class PagedFileManager:
    private:
        - ifstream file
        - int rowSize
        - int pageSize

        // Will probably need more locks for different authorities.
        - mutex lock
        - bool lock()
    
    public:
        - PagedFileManager(std::string fileName, int pageSize, int rowSize)

        - void setIterator()
        - bool destroyIterator()
        - bool hasNext()
        - int next(std::string *buf)

        - int write(std::string row)
        - void write(std::string row, int offset)
        - std::string read(int offset)
        - void remove(int offset)

class BPT:
    private:
        - PagedFileManager fileManager
        - const char *keyNames[]
        - const char *keyTypes[]
        - int numKeys
    
    public:
        - BPT(std::string schemaName, FDPair keyNamesAndTypes)

        - void insert(FDPair data, int offset)
        - int[] find(FDTriplet tests)
        - void remove(FDPair pair, int offset)
        // Update is done by removing the old and inserting the new.

        - int containsKey(std::string[] fields, int numFields)
        - bool equals(std::string[] fields, int numFields)

struct FDPair:
    - std::string[] fields
    - std::string[] data
    - int numFields

struct FDTriplet:
    - std::string[] fields
    - std::string[] data
    - std::string[] other
    - int numFields

struct Node:
    - FDPair *data
    - int parent
    // An offset in data file.
    // cur == 0 indicates an internal node, otherwise a leaf node (offset == 0 => page directory).
    - int cur 
    // sibling == 0 indicates there's no sibling.
    - int leftSibling
    - int rightSibling

struct LinkedList:
    - void *ptr
    - LinkedList *next

utils:
    - FDPair updateFDPair(FDPair data, FDTriplet changes);