DBMS:
    - Map<std::string schemaName, Schema schema> Schemas

    - parseQuery(std::string query)
    - processQuery()

    - int getTypeSize(std::string type)
    - std::string getStatusMessage(int status)

class Schema:
    private:
        - const char *schemaName

        - const char *fieldNames[]
        - const char *fieldTypes[]
        - int numFields

        - PagedFileManager fileManager
        - int write(FDPair *data)
        - void read(FDPair *buf, int offset)
        - void rowToString(FDPair data, std::string *buf)
        - void stringToRow(std::string buf, FDPair *data)

        - int rowSize
        - int numRows

        - LinkedList *keyList
    
    public:
        - Schema(std::string schemaName, FDPair *fieldNamesAndTypes)

        // The next 4 methods return status where 0 index indicates the number of statuses being returned.
        - int *insert(FDPair *data, int numToInsert)
        - int *update(FDTriplet *keys, FDPair *data)
        - int *find(FDTriplet *keys)
        - int *remove(FDTriplet *keys)

        - bool isEmpty()
        - int size()

        - bool setKey(std::string *keys, int numKeys)

class PagedFileManager:
    private:
        - ifstream file
        - int rowSize
        - int pageSize

        // Will probably need more locks for different authorities.
        - mutex lock
        - bool lock()
    
    public:
        - PagedFileManager(std::string fileName, int pageSize, int rowSize)

        - bool setIterator()
        - bool destroyIterator()
        - bool hasNext()
        - void next(std::string *buf)

        - int write(std::string row)
        - int read(int offset, std::string *buf)

class BPT:
    private:
        - PagedFileManager fileManager
        - const char *keyNames[]
        - const char *keyTypes[]
        - int numKeys
    
    public:
        - BPT(std::string schemaName, FDPair *keyNamesAndTypes)
        - int *insert(FDPair *data, int offset)
        - int *find(FDTriplet *keys)
        - int *remove(FDTriplet *keys)
        // Update is done by removing and inserting again.

        - bool containsKey(std::string *fields, int numFields)

struct FDPair:
    - std::string *fields
    - std::string *data
    - int numFields

struct FDTriplet:
    - std::string *fields
    - std::string *data
    - std::string *other
    - int numFields

struct Node:
    - FDPair *data
    - int parent
    // An offset in data file.
    // cur == 0 indicates an internal node, otherwise a leaf node (offset == 0 => page directory).
    - int cur 
    // sibling == 0 indicates there's no sibling.
    - int leftSibling
    - int rightSibling

struct LinkedList:
    - void *ptr
    - LinkedList *next